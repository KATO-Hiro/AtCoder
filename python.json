{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // See: https://code.visualstudio.com/docs/editor/userdefinedsnippets
    "Read String": {
        "prefix": "read-string",
        "body": [
            "$0 = input().rstrip()"
        ],
        "description": "Read a string."
    },
    "Read 2D-Strings": {
        "prefix": "read-str-2D-list",
        "body": [
            "$0 = [list(input().rstrip()) for _ in range($1)]"
        ],
        "description": "Read grid of strings."
    },
    "Read Interger": {
        "prefix": "read-int",
        "body": [
            "$0 = int(input())"
        ],
        "description": "Read an integer."
    },
    "Read 1D-Integers as map obj": {
        "prefix": "read-ints-1D-map",
        "body": [
            "$1, $0 = map(int, input().split())"
        ],
        "description": "Read a one-dimensional array of integers."
    },
    "Read 1D-Integers": {
        "prefix": "read-ints-1D",
        "body": [
            "$0 = list(map(int, input().split()))"
        ],
        "description": "Read a one-dimensional array of integers."
    },
    "Read 2D-Integers": {
        "prefix": "read-ints-2D",
        "body": [
            "$1 = [list(map(int, input().split())) for _ in range($2)]"
        ],
        "description": "Read a two-dimensional array of integers."
    },
    "Read input using loop": {
        "prefix": "read-input-using-loop",
        "body": [
            "for $1 in range($2):",
            "\t$3, $4 = map(int, input().split())"
        ]
    },
    "Read graph": {
        "prefix": "read-graph",
        "body": [
            "graph = [[] for _ in range($1)]",
            "",
            "for _ in range($2):",
            "\tai, bi = map(int, input().split())",
            "\tai -= 1",
            "\tbi -= 1",
            "",
            "\tgraph[ai].append(bi)",
            "\tgraph[bi].append(ai)"
        ],
        "description": "Read a non-directed graph (0-indexed)."
    },
    "Generate values as 1D-Array": {
        "prefix": "add-1D",
        "body": [
            "$1 = [$2 for _ in range($3)]"
        ],
        "description": "Generate a one-dimensional array of values."
    },
    "Double for loop": {
        "prefix": "double-for-loop",
        "body": [
            "for $1 in range($2):",
            "\tfor $3 in range($4):",
            "\t\tpass"
        ]
    },
    "Import Defaultdict": {
        "prefix": "import-defaultdict",
        "body": [
            "from collections import defaultdict",
            "",
            "$1 = defaultdict(int)" 
        ],
    },
    "Import Accumulate": {
        "prefix": "import-accumulate",
        "body": [
            "from itertools import accumulate",
            "",
            "$1 = list(accumulate([0] + list(map(int, input().split()))))"
        ],
        "description": "Import accumulate and return a list for cumulative sum."
    },
    "Import Counter": {
        "prefix": "import-counter",
        "body": [
            "from collections import Counter",
            "",
            "$1 = Counter($2)"
        ]
    },
    "Import Heapq": {
        "prefix": "import-heapq",
        "body": [
            "from heapq import heappush, heappop",
            "",
            "heappush(${1:elements}, -${2:number})",
            "",
            "$0 = -heappop($1)"
        ]
    },
    "dx, dy for grid": {
        "prefix": "dxy",
        "body": [
            "dxy = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, -1), (-1, 1), (1, 1)]",
            "# dxy = dxy[:4]",
        ]
    },
    "Is in grid": {
        "prefix": "is-in-grid",
        "body": [
            "def is_in_grid(nx: int, ny: int, w: int = w, h: int = h) -> bool:",
            "\tif not (0 <= nx < w):",
            "\t\treturn False",
            "\tif not (0 <= ny < h):",
            "\t\treturn False",
            "",
            "\treturn True",
        ]
    },
    "Ceil": {
        "prefix": "ceil",
        "body": [
            "def ceil(a: int, b: int) -> int:",
            "\tassert b != 0",
            "",
            "\treturn (a + b - 1) // b",
        ]
    },
    "Mod": {
        "prefix": "mod-10 ** 9 + 7",
        "body": [
            "mod = 10 ** 9 + 7"
        ]
    },
    "Mod998244353": {
        "prefix": "mod-998244353",
        "body": [
            "mod = 998244353"
        ]
    },
    "Inverse (mod p) ex: inv = 1 / p": {
        "prefix": "mod-pow",
        "body": [
            "inv = pow($0, mod - 2, mod)  # 1 / p"
        ]
    },
    "inf": {
        "prefix": "inf",
        "body": [
            "inf = float('inf')"
        ],
    },
    "set-rec": {
        "prefix": "set-rec",
        "body": [
            "sys.setrecursionlimit(10 ** 8)"
        ]
    },
    "ans": {
        "prefix": "ans",
        "body": [
            "ans = $1",
            "",
            "print(ans)"
        ]
    },
    "Print": {
        "prefix": "p",
        "body": [
            "print($1)"
        ]
    },
    "Print flush": {
        "prefix": "flush",
        "body": [
            "print($1, flush=True)"
        ]
    },
    "Print Yes and No": {
        "prefix": "pyn",
        "body": [
            "if $1:",
            "\tprint('Yes')",
            "else:",
            "\tprint('No')"
        ]
    },
    "Print YES and NO": {
        "prefix": "pYN",
        "body": [
            "if $1:",
            "\tprint('YES')",
            "else:",
            "\tprint('NO')"
        ]
    },
    "Print Takahashi and Aoki": {
        "prefix": "Print Takahashi and Aoki",
        "body": [
            "if $1:",
            "\tprint('Takahashi')",
            "else:",
            "\tprint('Aoki')"
        ]
    }
}